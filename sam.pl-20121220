#!/usr/bin/perl

use strict;

use Class::Struct;
use Math::Spline qw(spline linsearch binsearch);
use Math::Derivative qw(Derivative2);

my $datapath = "./data";

struct Airfoil => {
    top_x => '@',
    top_y => '@',
    bottom_x => '@',
    bottom_y => '@',
};

# load root airfoil
print "root: ";
my( $tx_ref, $ty_ref, $bx_ref, $by_ref ) = &load_airfoil_split( "clarky" );
my @root_top_x = @$tx_ref;
my @root_top_y = @$ty_ref;
my @root_bottom_x = @$bx_ref;
my @root_bottom_y = @$by_ref;

my( $x_ref, $y_ref ) = &load_airfoil( "clarky" );
my @root_x = @$x_ref;
my @root_y = @$y_ref;

# load tip airfoil
print "tip: ";
my( $tx_ref, $ty_ref, $bx_ref, $by_ref ) = &load_airfoil_split( "arad6" );
my @tip_top_x = @$tx_ref;
my @tip_top_y = @$ty_ref;
my @tip_bottom_x = @$bx_ref;
my @tip_bottom_y = @$by_ref;

my( $x_ref, $y_ref ) = &load_airfoil( "ah7476" );
my @tip_x = @$x_ref;
my @tip_y = @$y_ref;

my $root_chord = 14.0;
# my $root_vert_scale = 1.0;

my $tip_chord = 10.0;
# my $tip_vert_scale = 1.0;

my $span = 48.0;
my $tip_offset = 6.0;
# my $twist_deg = 3.0;

my $slices = 10;
my $xdivs = 1000;

&render_slice_split( 0.0 );
&render_slice_split( 24.0 );
&render_slice_split( 48.0 );


sub load_airfoil {
    my $base = shift;

    my @x;
    my @y;

    my $file = $datapath . "/airfoils/" . $base . ".dat";

    open( my $in, "<", "$file" ) || die "Cannot open $file\n";

    # first line is descriptive text (discard)
    my $description = <$in>;
    # chomp($description);
    # strip leading/trailing whitespace and collapse extra white space
    $description =~ s/^\s+//;
    $description =~ s/\s+$//;
    $description =~ s/\s+/ /g;

    while ( <$in> ) {
	my $line = $_;
	$line =~ s/^\s+//;
	$line =~ s/\s+$//;
	my ($x, $y) = split(/\s+/, $line);
	# print "$x $y\n";
	push @x, $x;
	push @y, $y;
    }

    printf( "loaded $description ($base), %d points\n", $#x);

    return ( \@x, \@y );
}


sub load_airfoil_split {
    my $base = shift;

    my @top_x;
    my @top_y;
    my @bottom_x;
    my @bottom_y;

    my $file = $datapath . "/airfoils/" . $base . ".dat";

    open( my $in, "<", "$file" ) || die "Cannot open $file\n";

    # first line is descriptive text (discard)
    my $description = <$in>;
    # chomp($description);
    # strip leading/trailing whitespace and collapse extra white space
    $description =~ s/^\s+//;
    $description =~ s/\s+$//;
    $description =~ s/\s+/ /g;

    # first half of data file is the top contour, when x = 0.0 that
    # marks the end of the top and the start of the bottom.
    my $top = 1;

    while ( <$in> ) {
	my $line = $_;
	$line =~ s/^\s+//;
	$line =~ s/\s+$//;
	my ($x, $y) = split(/\s+/, $line);
	if ( $top ) {
	    # print "top $x $y\n";
	    unshift @top_x, $x;
	    unshift @top_y, $y;
	} 

	# this if structure/order has the side effect of repeating the end
	# point as the start of the bottom contour
	if ( $x < 0.000001 ) {
	    $top = !$top;
	}

	if ( ! $top ) {
	    # print "bottom $x $y\n";
	    push @bottom_x, $x;
	    push @bottom_y, $y;
	}
    }

    printf( "loaded $description ($base), top = %d points, bottom = %d points\n",
	    $#top_x, $#bottom_x);

    return ( \@top_x, \@top_y, \@bottom_x, \@bottom_y );
}


sub render_slice {
    my $wpos = shift;

    my $blend_factor = $wpos / $span;

    my $step = (1.0 / $xdivs);

    printf("before derivative2\n");

    my @root_y2 = Derivative2( \@root_x, \@root_y );
    my @tip_y2 = Derivative2( \@tip_x, \@tip_y );

    printf("past derivative2\n");

    for ( my $i = 0; $i <= $xdivs; $i++ ) {
	my $x = $i * $step;

	my $index;
	$index = binsearch(\@root_top_x, $x);
	my $y1_interp = spline(\@root_top_x, \@root_top_y, \@root_y2, $index, $x);

	$index = binsearch(\@tip_top_x, $x);
	my $y2_interp = spline(\@tip_top_x, \@tip_top_y, \@tip_y2, $index, $x);

	my $y = (1.0 - $blend_factor) * $y1_interp + $blend_factor * $y2_interp;
	#my $y = $y1_interp;

	print "$x $y\n";
    }
}


sub render_slice_split {
    my $wpos = shift;

    my $blend_factor = $wpos / $span;

    my $step = (1.0 / $xdivs);

    my @root_y2 = Derivative2( \@root_top_x, \@root_top_y );
    my @tip_y2 = Derivative2( \@tip_top_x, \@tip_top_y );

    for ( my $i = 0; $i <= $xdivs; $i++ ) {
	my $x = $i * $step;

	my $index;
	$index = binsearch(\@root_top_x, $x);
	my $y1_interp = spline(\@root_top_x, \@root_top_y, \@root_y2, $index, $x);

	$index = binsearch(\@tip_top_x, $x);
	my $y2_interp = spline(\@tip_top_x, \@tip_top_y, \@tip_y2, $index, $x);

	my $y = (1.0 - $blend_factor) * $y1_interp + $blend_factor * $y2_interp;
	#my $y = $y1_interp;

	print "$x $y\n";
    }

    my @root_y2 = Derivative2( \@root_bottom_x, \@root_bottom_y );
    my @tip_y2 = Derivative2( \@tip_bottom_x, \@tip_bottom_y );

    for ( my $i = 0; $i <= $xdivs; $i++ ) {
	my $x = $i * $step;

	my $index;
	$index = binsearch(\@root_bottom_x, $x);
	my $y1_interp = spline(\@root_bottom_x, \@root_bottom_y, \@root_y2, $index, $x);

	$index = binsearch(\@tip_bottom_x, $x);
	my $y2_interp = spline(\@tip_bottom_x, \@tip_bottom_y, \@tip_y2, $index, $x);

	my $y = (1.0 - $blend_factor) * $y1_interp + $blend_factor * $y2_interp;
	#my $y = $y1_interp;

	print "$x $y\n";
    }
}
